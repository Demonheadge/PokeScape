
const OBJ_EVENT_ID_SMUGGLER = 1
const OBJ_EVENT_ID_THOK = 2

mapscripts Dungeoneering_Lobby_MapScripts {
    
    MAP_SCRIPT_ON_TRANSITION 
    {
        call(Daemonheim_Lobby_STATE)
    }
    MAP_SCRIPT_ON_FRAME_TABLE 
    [
		VAR_POKESCAPE_DAEMONHEIM_GYM_QUEST, 10: THOK_GYM_CHALLENGE_STATE_3
    ]

    MAP_SCRIPT_ON_LOAD {
        setflag(FLAG_TEMP_12) //- Prevents Normal Decorations spawning in Puzzle / Boss / Starter Rooms.
        call(Randomise_Dungeon)
    }
}






script DUNGEONEERING_CHECK_HOWMANYDUNGEONS {
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_STARTER_ROOM) 
    msgbox(format("You have explored: {STR_VAR_1} floors."))
    closemessage
    release
    end
}

script DUNGEONEERING_CHECK_VAR {
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_STARTER_ROOM) 
    msgbox(format("The Starting room is Room: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_1) 
    msgbox(format("The Puzzle Room 1 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_2) 
    msgbox(format("The Puzzle Room 2 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_3) 
    msgbox(format("The Puzzle Room 3 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_4) 
    msgbox(format("The Puzzle Room 4 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_5) 
    msgbox(format("The Puzzle Room 5 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_6) 
    msgbox(format("The Puzzle Room 6 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_7) 
    msgbox(format("The Puzzle Room 7 is: {STR_VAR_1}."))
    buffernumberstring(STR_VAR_1, VAR_DUNGEONEERING_RANDOM_PUZZLE_8) 
    msgbox(format("The Puzzle Room 8 is: {STR_VAR_1}."))
    closemessage
    release
    end
}




script Randomise_Puzzles {
    setvar(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES, 6) //amount of puzzles

    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_1, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_2, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_3, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_4, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_5, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_6, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) 
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_7, VAR_RESULT)
    random(VAR_DUNGEONEERING_AMOUNT_OF_PUZZLES) //+ 10
    copyvar(VAR_DUNGEONEERING_RANDOM_PUZZLE_8, VAR_RESULT) //Add 10 to get to the harder puzzles.
    return
}



script Start_Dungeoneering {
    call(RandomiseSeed_ForDoors)
    call(Randomise_Dungeon)
    call(Randomise_Puzzles)
    delay(60)
    playse(SE_LEDGE)
    applymovement(OBJ_EVENT_ID_PLAYER, Movement_JumpIntoPortal)
    waitmovement(0)
    
    if (var(VAR_DUNGEONEERING_STARTER_ROOM) == 1) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_1, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 2) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_2, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 3) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_3, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 4) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_4, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 5) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_5, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 6) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_6, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 7) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_7, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 8) {
        //setdynamicwarp(MAP_DUNGEONEERING_8, 0)
        warp(MAP_DUNGEONEERING_8, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 9) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_9, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 10) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_10, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 11) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_11, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 12) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_12, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 13) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_13, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 14) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_14, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 15) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_15, 0, 0, 0)
        waitstate
    }
    elif (var(VAR_DUNGEONEERING_STARTER_ROOM) == 16) {
        //setdynamicwarp(MAP_DUNGEONEERING_1, 0)
        warp(MAP_DUNGEONEERING_16, 0, 0, 0)
        waitstate
    }
}


movement Movement_JumpIntoPortal {
    jump_up
    set_invisible
}
















//LAYOUTS

script DungeonLayout_ROOM_PATH_1 {
    //STARTER ROOM 1
    setvar(VAR_DUNGEONEERING_STARTER_ROOM, 1)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_1, DungeonLayout_StartingRoom)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_1)
    call(DungeonLayout_BLOCKED_LEFT_ROOM_1)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_1)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_4)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_1)
    call(DungeonLayout_BLOCKED_UP_ROOM_8)
    setvar(VAR_DUNGEONEERING_BOSS_ROOM, 12)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_12, DungeonLayout_BossRoom)
    return
}

script DungeonLayout_ROOM_PATH_2 {
    //STARTER ROOM 1
    setvar(VAR_DUNGEONEERING_STARTER_ROOM, 1)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_1, DungeonLayout_StartingRoom)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_1)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_2)
    call(DungeonLayout_BLOCKED_UP_ROOM_3)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_4)
    setvar(VAR_DUNGEONEERING_BOSS_ROOM, 12)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_12, DungeonLayout_BossRoom)
    return
}

script DungeonLayout_ROOM_PATH_3 {
    //STARTER ROOM 1
    setvar(VAR_DUNGEONEERING_STARTER_ROOM, 8)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_8, DungeonLayout_StartingRoom)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_12)
    call(DungeonLayout_BLOCKED_LEFT_ROOM_8)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_5)
    call(DungeonLayout_BLOCKED_LEFT_ROOM_14)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_1)
    call(DungeonLayout_BLOCKED_LEFT_ROOM_1)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_2)
    setvar(VAR_DUNGEONEERING_BOSS_ROOM, 12)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_12, DungeonLayout_BossRoom)
    return
}
script DungeonLayout_ROOM_PATH_4 {
    //STARTER ROOM 1
    setvar(VAR_DUNGEONEERING_STARTER_ROOM, 6)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_6, DungeonLayout_StartingRoom)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_2)
    call(DungeonLayout_BLOCKED_RIGHT_ROOM_1)
    call(DungeonLayout_BLOCKED_UP_ROOM_2)
    setvar(VAR_DUNGEONEERING_BOSS_ROOM, 2)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_2, DungeonLayout_BossRoom)
    return
}

script DungeonLayout_ROOM_PATH_5 {
    //STARTER ROOM 1
    setvar(VAR_DUNGEONEERING_STARTER_ROOM, 4)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_4, DungeonLayout_StartingRoom)

    call(DungeonLayout_BLOCKED_RIGHT_ROOM_4)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_1)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_12)
    call(DungeonLayout_BLOCKED_UP_ROOM_8)
    call(DungeonLayout_BLOCKED_UP_ROOM_15)
    call(DungeonLayout_BLOCKED_UP_ROOM_14)
    call(DungeonLayout_BLOCKED_DOWN_ROOM_3)
    call(DungeonLayout_BLOCKED_UP_ROOM_3)
    call(DungeonLayout_BLOCKED_LEFT_ROOM_5)



    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_1, DungeonLayout_PuzzleRoom_1)

    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_2, DungeonLayout_PuzzleRoom_2)

    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_3, DungeonLayout_PuzzleRoom_3)
    //FLAG_DG_PUZZLE_ROOM_1 - Check if complete.
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_5, DungeonLayout_PuzzleRoom_5)
    //FLAG_DG_PUZZLE_ROOM_2
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_6, DungeonLayout_PuzzleRoom_6)
    //FLAG_DG_PUZZLE_ROOM_3
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_7, DungeonLayout_PuzzleRoom_7)
    //FLAG_DG_PUZZLE_ROOM_4
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_8, DungeonLayout_PuzzleRoom_8)
    

    setvar(VAR_DUNGEONEERING_BOSS_ROOM, 11)
    specialvar (VAR_RESULT, GetCurrentMap)
    call_if_eq (VAR_RESULT, MAP_DUNGEONEERING_11, DungeonLayout_BossRoom)
    return
}

















//THOK GYM -----------------------------------------------------------------------------

script Daemonheim_Lobby_STATE {
    setflag(FLAG_TEMP_1F) // Hide thok.

    switch (var(VAR_POKESCAPE_DAEMONHEIM_GYM_QUEST)){         
        case 10:
            clearflag(FLAG_TEMP_1F)
            addobject(OBJ_EVENT_ID_THOK)
            setobjectxyperm(OBJ_EVENT_ID_SMUGGLER, 9, 5)
            setobjectmovementtype(OBJ_EVENT_ID_SMUGGLER, MOVEMENT_TYPE_FACE_LEFT)
    }
    return        
}


script THOK_GYM_CHALLENGE_STATE_3 {
    
    applymovement(OBJ_EVENT_ID_THOK, Movement_DaemonheimGym_8)
    applymovement(OBJ_EVENT_ID_PLAYER, Movement_DaemonheimGym_9)
    waitmovement(OBJ_EVENT_ID_THOK)
    namebox("Thok")
    msgbox(format("I'll be in Dungeon!\pYou come find me.\lThen we battle."))
    closemessage
    hidenamebox
    playse(SE_LEDGE)
    applymovement(OBJ_EVENT_ID_THOK, Movement_DaemonheimGym_10)
    waitmovement(0)
    setflag(FLAG_TEMP_1F)
    removeobject(OBJ_EVENT_ID_THOK)

    applymovement(OBJ_EVENT_ID_SMUGGLER, Movement_DaemonheimGym_11)
    waitmovement(0)
    namebox("Smuggler")
    msgbox(format("Sorry about Thok, he can be a little forward.\pYour a gym challenger correct?\pIt's like Thok said, you must find him within the Dungeon and then he will challenge you to a battle.\pThe part he left out was that there are many puzzles and enemies that await you.\pWhen you are ready just jump in that portal.\pGood luck, I'll be here if you need any advice about the dungeon."))
    closemessage
    hidenamebox
    applymovement(OBJ_EVENT_ID_SMUGGLER, Movement_DaemonheimGym_12)
    waitmovement(0)
    setobjectmovementtype(OBJ_EVENT_ID_SMUGGLER, MOVEMENT_TYPE_WANDER_AROUND)
    setvar(VAR_POKESCAPE_DAEMONHEIM_GYM_QUEST, 15)


    
}

movement Movement_DaemonheimGym_8 {
    walk_up * 3
    face_down
}
movement Movement_DaemonheimGym_9 {
    walk_slow_up * 2
}
movement Movement_DaemonheimGym_10 {
    jump_2_up
}
movement Movement_DaemonheimGym_11 {
    face_up
    delay_16 * 2
    walk_left * 3
    face_down
}

movement Movement_DaemonheimGym_12 {
    walk_right * 3
    face_left
}





//THOK GYM -----------------------------------------------------------------------------
